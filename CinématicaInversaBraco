#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from std_msgs.msg import Float64, Float64MultiArray
from sensor_msgs.msg import JointState
from inverse_kinematics import InverseKinematicsArms

class ArmControlNode:
    def __init__(self):
        rospy.init_node('inverse_kinematics_arms_node')

        self.publishers = {
            'left_arm_pub': rospy.Publisher('/martha/left_arm/command', Float64MultiArray, queue_size=10),
            'right_arm_pub': rospy.Publisher('/martha/right_arm/command', Float64MultiArray, queue_size=10),
        }

        rospy.Subscriber('/arm_coordinates_input', JointState, self.coordinates_callback)

        self.physical_parameters = self.load_physical_parameters()
        self.inverse_kinematics = InverseKinematicsArms(self.physical_parameters)

    def coordinates_callback(self, msg):
        x_left, y_left, z_left = msg.position[:3]
        x_right, y_right, z_right = msg.position[3:]

        joints = self.inverse_kinematics.compute_joints_targets(x_left, y_left, z_left, 
                                                                x_right, y_right, z_right)
        if joints:
            self.publish_angles(joints)

    def publish_angles(self, joints):
        left_arm = joints['left_arm']
        right_arm = joints['right_arm']

        left_arm_msg = Float64MultiArray()
        left_arm_msg.data = [left_arm['shoulder_pitch'], left_arm['shoulder_roll'], left_arm['elbow_pitch']]

        right_arm_msg = Float64MultiArray()
        right_arm_msg.data = [right_arm['shoulder_pitch'], right_arm['shoulder_roll'], right_arm['elbow_pitch']]

        self.publishers['left_arm_pub'].publish(left_arm_msg)
        self.publishers['right_arm_pub'].publish(right_arm_msg)

    def load_physical_parameters(self):
        parameters = {
            'upper_arm_length': rospy.get_param('/arm_params/upper_arm_length', 0.15),
            'lower_arm_length': rospy.get_param('/arm_params/lower_arm_length', 0.15),
            'shoulder_pitch0': rospy.get_param('/arm_params/shoulder_pitch0', 0.0),
            'elbow_pitch0': rospy.get_param('/arm_params/elbow_pitch0', 0.0),
            'torso_to_left_shoulder': rospy.get_param('/arm_params/torso_to_left_shoulder', [0.05, 0.15, 0.3]),
            'joint_limits': rospy.get_param('/arm_params/joint_limits', {}),
        }
        rospy.loginfo(f"Loaded physical parameters: {parameters}")
        return parameters

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    try:
        node = ArmControlNode()
        node.spin()
    except rospy.ROSInterruptException:
        pass
